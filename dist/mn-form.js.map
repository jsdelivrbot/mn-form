{"version":3,"sources":["scripts/mn-form.class.js"],"names":["MnForm","self","_this","_ret","_classCallCheck","this","setForm","_possibleConstructorReturn","putInForm","element","form","appendChild","getNameAndValue","attr","name","value","defaults","attribute","hasOwnProperty","notImplemented","defaultAttr","attributes","some","setAttribute","attributeSpec","attributeSpecs","filter","spec","isDefaultAttribute","attributeValue","isValidValue","values","indexOf","default","_this2","remove","document","createElement","Array","from","map","defaultAttibutes","concat","forEach","removeAttribute","children","insertBefore","firstChild","HTMLElement","customElements","define"],"mappings":"sxCAAMA,OAAAA,SAAAA,cACJ,QAAAA,QAAYC,MAAM,GAAAC,OAAAC,IAGhB,OAHgBC,iBAAAC,KAAAL,QAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,OAAAA,WAAAA,OAAAA,eAAAA,SAAAA,KAAAA,KAAaA,OACbC,MAAKI,UACLH,KAAOF,KAAPM,2BAAAL,MAAAC,iGAyDA,QAASK,WAAUC,SACjBC,KAAKC,YAAYF,SAKnB,QAASG,iBAAgBC,MACvB,GAAIC,MAAOD,KAAKC,KACZC,MAAQF,KAAKE,KACjB,QAAQD,KAAAA,KAAMC,MAAAA,OAGhB,QAASC,UAASC,WAChB,MAAOA,WAAUC,eAAe,WAGlC,QAASC,gBAAeC,aACtB,OAAQC,WAAWC,KAAK,SAAAL,WAAA,MAAaA,WAAUH,OAASM,YAAYN,OAGtE,QAASS,cAAaN,WACpB,GAAIO,eAAgBC,eAAeC,OAAO,SAAAC,MAAA,MAAQA,MAAKb,OAASG,UAAUH,OAAM,EAChF,KAAKU,cACH,OAAO,CAET,IAAII,oBAAqBJ,cAAcN,eAAe,WAClDW,eAAiBZ,UAAUF,KAE/B,IAAIa,mBAAoB,CACtB,GAAIE,cAAeN,cAAcN,eAAe,WAC3CM,cAAcO,OAAOC,QAAQH,iBAAmB,EAEjDd,MAAQe,aACRD,eACAL,cAAcS,OAElBvB,MAAKa,aAAaN,UAAUH,KAAMC,WACzBc,iBACTnB,KAAKa,aAAaN,UAAUH,KAAMe,gBA5F9B,GAAAK,QAAA7B,KACJoB,iBAEAX,KAAM,aACNmB,QAAS,QACTF,QACE,OACA,WAIFjB,KAAM,OACNmB,QAAS,SAGTnB,KAAM,aACNmB,QAAS,SAGTnB,KAAM,aAGNA,KAAM,mBAGNA,KAAM,KACNqB,QAAQ,IAIRzB,KAAO0B,SAASC,cAAc,QAE9BhB,WAAaiB,MACdC,KAAKlC,KAAKgB,YACVmB,IAAI5B,iBAEH6B,iBAAmBhB,eACpBC,OAAOV,UACPU,OAAOP,eAEVE,YAAaA,WAAWqB,OAAOD,kBAE/BpB,WAAWsB,QAAQpB,cAEnBE,eACGC,OAAO,SAAAb,MAAA,MAAQA,MAAKsB,SACpBQ,QAAQ,SAAA9B,MACPqB,OAAKU,gBAAgB/B,KAAKC,QAG9BwB,MACGC,KAAKlC,KAAKwC,UACVF,QAAQnC,WAMXH,KAAKyC,aAAapC,KAAML,KAAK0C,wBAjEZC,YAyGrBC,gBAAeC,OAAO,UAAWlD","file":"mn-form.js","sourcesContent":["class MnForm extends HTMLElement {\n  constructor(self) {\n    self = super(self)\n    this.setForm()\n    return self\n  }\n\n  setForm() {\n    let attributeSpecs = [\n      {\n        name: 'spellcheck',\n        default: 'false',\n        values: [\n          'true',\n          'false',\n        ],\n      },\n      {\n        name: 'name',\n        default: 'form',\n      },\n      {\n        name: 'novalidate',\n        default: 'true',\n      },\n      {\n        name: 'disabled',\n      },\n      {\n        name: 'autocapitalize',\n      },\n      {\n        name: 'id',\n        remove: true,\n      },\n    ]\n\n    let form = document.createElement('form')\n\n    let attributes = Array\n      .from(this.attributes)\n      .map(getNameAndValue)\n\n    let defaultAttibutes = attributeSpecs\n      .filter(defaults)\n      .filter(notImplemented)\n\n    attributes = attributes.concat(defaultAttibutes)\n\n    attributes.forEach(setAttribute)\n\n    attributeSpecs\n      .filter(attr => attr.remove)\n      .forEach(attr => {\n        this.removeAttribute(attr.name)\n      })\n\n    Array\n      .from(this.children)\n      .forEach(putInForm)\n\n    function putInForm(element) {\n      form.appendChild(element)\n    }\n\n    this.insertBefore(form, this.firstChild)\n\n    function getNameAndValue(attr) {\n      let name = attr.name\n      let value = attr.value\n      return {name, value}\n    }\n\n    function defaults(attribute) {\n      return attribute.hasOwnProperty('default')\n    }\n\n    function notImplemented(defaultAttr) {\n      return !attributes.some(attribute => attribute.name === defaultAttr.name)\n    }\n\n    function setAttribute(attribute) {\n      let attributeSpec = attributeSpecs.filter(spec => spec.name === attribute.name)[0]\n      if (!attributeSpec) {\n        return false\n      }\n      let isDefaultAttribute = attributeSpec.hasOwnProperty('default')\n      let attributeValue = attribute.value\n\n      if (isDefaultAttribute) {\n        let isValidValue = attributeSpec.hasOwnProperty('values')\n          && attributeSpec.values.indexOf(attributeValue) >= 0\n\n        let value = isValidValue\n          ? attributeValue\n          : attributeSpec.default\n\n        form.setAttribute(attribute.name, value)\n      } else if (attributeValue) {\n        form.setAttribute(attribute.name, attributeValue)\n      }\n    }\n  }\n}\n\ncustomElements.define('mn-form', MnForm)\n"]}